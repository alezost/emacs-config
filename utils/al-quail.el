;;; al-quail.el --- Additional input methods

;; Copyright © 2019–2021 Alex Kost

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; This file provides additional input methods that can be used with
;; `set-input-method' and `toggle-input-method' commands.

;;; Code:

(require 'quail)

;; Originates from "latin-prefix" and "TeX" input methods.
;; Look at: (find-library "leim/quail/latin-ltx")
(quail-define-package
 "al/latin-prefix" "UTF-8" "ä" t
 "Latin-1 and UTF-8 characters input method with prefix modifiers.

The main prefixes are:

  ;   mostly, for latin characters with diaeresis (ä, ü, etc.);
  _   for subscript symbols;
  ^   for superscript symbols;
  \   for LaTeX-like input similar to `TeX' input method.
"
 '(("\t" . quail-completion))
 t t nil nil nil nil nil nil nil t)

(eval-when-compile
  (defconst al/latin-mark-map
    '(("DOT BELOW" . "d")
      ("DOT ABOVE" . ".")
      ("OGONEK" . "k")
      ("CEDILLA" . "c")
      ("CARON" . "v")
      ("MACRON" . "=")
      ("BREVE" . "u")
      ("TILDE" . "~")
      ("GRAVE" . "`")
      ("CIRCUMFLEX" . "^")
      ("DIAERESIS" . "\"")
      ("DOUBLE ACUTE" . "H")
      ("ACUTE" . "'")))

  (defconst al/latin-mark-re
    (regexp-opt (mapcar #'car al/latin-mark-map)))

  (defun al/latin-ascii-p (char)
    (and (characterp char) (< char 128)))

  (defmacro al/latin-define-rules (&rest rules)
    (declare (indent 0) (debug (name body)))
    (load "uni-name" nil t)
    (let ((newrules ()))
      (dolist (rule rules)
        (pcase rule
          (`(,_ ,(pred characterp))
           (push rule newrules))
          (`(,seq ,re)
           (let ((count 0)
                 (re (eval re t)))
             (maphash
              (lambda (name char)
                (when (and (characterp char) ;; Ignore char-ranges.
                           (string-match re name))
                  (let ((keys (if (stringp seq)
                                  (replace-match seq nil nil name)
                                (funcall seq name char))))
                    (if (listp keys)
                        (dolist (x keys)
                          (setq count (1+ count))
                          (push (list x char) newrules))
                      (setq count (1+ count))
                      (push (list keys char) newrules)))))
              (ucs-names))))))
      (setq newrules (delete-dups newrules))
      (let ((rules (copy-sequence newrules)))
        (while rules
          (let ((rule (pop rules)))
            (when (assoc (car rule) rules)
              (let ((conflicts (list (cadr rule)))
                    (tail rules)
                    c)
                (while (setq c (assoc (car rule) tail))
                  (push (cadr c) conflicts)
                  (setq tail (cdr (memq c tail)))
                  (setq rules (delq c rules)))
                (message "Conflict for %S: %S"
                         (car rule) (apply #'string conflicts)))))))
      (let* ((inputs (delete-dups (mapcar #'car newrules)))
             (conflicts (- (length newrules) (length inputs))))
        (unless (zerop conflicts)
          (message "al/latin: %d rules (+ %d conflicts)!"
                   (length inputs) conflicts)))
      `(quail-define-rules ,@(nreverse newrules)))))

(al/latin-define-rules
  ((lambda (name _char)
     (let* ((c (if (match-end 1)
                   (downcase (match-string 2 name))
                 (match-string 2 name)))
            (mark1 (cdr (assoc (match-string 3 name) al/latin-mark-map)))
            (mark2 (if (match-end 4)
                       (cdr (assoc (match-string 4 name) al/latin-mark-map))))
            (marks (if mark2 (concat mark1 "\\" mark2) mark1)))
       (cl-assert mark1)
       (cons (format "\\%s{%s}" marks c)
             ;; Exclude "d" because we use "\\dh" for something else.
             (unless (member (or mark2 mark1) '("d")) ;; "k"
               (list (format "\\%s%s" marks c))))))
   (concat "\\`LATIN \\(?:CAPITAL\\|SMAL\\(L\\)\\) LETTER \\(.\\) WITH \\("
           al/latin-mark-re "\\)\\(?: AND \\("
           al/latin-mark-re "\\)\\)?\\'"))

  ((lambda (name _char)
     (let* ((mark (cdr (assoc (match-string 1 name) al/latin-mark-map))))
       (cl-assert mark)
       (list (format "\\%s" mark))))
   (concat "\\`COMBINING \\(" al/latin-mark-re "\\)\\(?: ACCENT\\)?\\'"))

  ((lambda (name _char)
     (let* ((base (concat (match-string 1 name) (match-string 3 name)))
            (basechar (gethash base (ucs-names))))
       (when (al/latin-ascii-p basechar)
         (string (if (match-end 2) ?^ ?_) basechar))))
   "\\(.*\\)SU\\(?:B\\|\\(PER\\)\\)SCRIPT \\(.*\\)")

  ((lambda (name _char)
     (let* ((basename (match-string 2 name))
            (name (if (match-end 1) (capitalize basename) (downcase basename))))
       (concat "^" (if (> (length name) 1) "\\") name)))
   "\\`MODIFIER LETTER \\(?:SMALL\\|CAPITA\\(L\\)\\) \\([[:ascii:]]+\\)\\'")

  ;; Provides some useful entries (yen, euro, copyright, registered,
  ;; currency, minus, micro), but also a lot of dubious ones.
  ((lambda (name char)
     (unless (or (al/latin-ascii-p char)
                 ;; We prefer COMBINING LONG SOLIDUS OVERLAY for \not.
                 (member name '("NOT SIGN")))
       (concat "\\" (downcase (match-string 1 name)))))
   "\\`\\([^- ]+\\) SIGN\\'")

  ;; "GREEK SMALL LETTER PHI" (which is \phi) and "GREEK PHI SYMBOL"
  ;; (which is \varphi) are reversed in `ucs-names', so we define
  ;; them manually.
  ((lambda (name _char)
     (unless (string-match-p "\\<PHI\\>" name)
       (concat "\\" (funcall (if (match-end 1) #'capitalize #'downcase)
                             (match-string 2 name)))))
   "\\`GREEK \\(?:SMALL\\|CAPITA\\(L\\)\\) LETTER \\([^- ]+\\)\\'")
  ((lambda (name char)
     (unless (string-match-p "\\<PHI\\>" name)
       (concat "\\var" (downcase (match-string 1 name)))))
   "\\`GREEK \\([^- ]+\\) SYMBOL\\'")
  ("\\phi" ?ϕ)
  ("\\Phi" ?Φ)
  ("\\varphi" ?φ)

  ("\\Box" ?□)
  ("\\Bumpeq" ?≎)
  ("\\Diamond" ?◇)
  ("\\Downarrow" ?⇓)
  ("\\Leftarrow" ?⇐)
  ("\\Leftrightarrow" ?⇔)
  ("\\Ll" ?⋘)
  ("\\Lleftarrow" ?⇚)
  ("\\Longleftarrow" ?⇐)
  ("\\Longleftrightarrow" ?⇔)
  ("\\Longrightarrow" ?⇒)
  ("\\Lsh" ?↰)
  ("\\Rightarrow" ?⇒)
  ("\\Rrightarrow" ?⇛)
  ("\\Rsh" ?↱)
  ("\\Uparrow" ?⇑)
  ("\\Updownarrow" ?⇕)
  ("\\Vdash" ?⊩)
  ("\\Vvdash" ?⊪)
  ("\\aleph" ?ℵ)
  ("\\amalg" ?∐)
  ("\\approx" ?≈)
  ("\\approxeq" ?≊)
  ("\\ast" ?∗)
  ("\\asymp" ?≍)
  ("\\backcong" ?≌)
  ("\\backepsilon" ?∍)
  ("\\backprime" ?‵)
  ("\\backsim" ?∽)
  ("\\backsimeq" ?⋍)
  ("\\backslash" ?\\)
  ("\\barwedge" ?⊼)
  ("\\beth" ?ℶ)
  ("\\between" ?≬)
  ("\\bigcirc" ?◯)
  ("\\bigstar" ?★)
  ("\\bigtriangledown" ?▽)
  ("\\bigtriangleup" ?△)
  ("\\bigvee" ?⋁)
  ("\\bigwedge" ?⋀)
  ("\\blacklozenge" ?✦)
  ("\\blacksquare" ?▪)
  ("\\blacktriangle" ?▴)
  ("\\blacktriangledown" ?▾)
  ("\\blacktriangleleft" ?◂)
  ("\\blacktriangleright" ?▸)
  ("\\bullet" ?•)
  ("\\bumpeq" ?≏)
  ("\\checkmark" ?✓)
  ("\\chi" ?χ)
  ("\\circ" ?∘)
  ("\\circeq" ?≗)
  ("\\circlearrowleft" ?↺)
  ("\\circlearrowright" ?↻)
  ("\\circledR" ?®)
  ("\\circledS" ?Ⓢ)
  ("\\circledast" ?⊛)
  ("\\circledcirc" ?⊚)
  ("\\circleddash" ?⊝)
  ("\\coloneq" ?≔)
  ("\\complement" ?∁)
  ("\\cong" ?≅)
  ("\\coprod" ?∐)
  ("\\curlyeqprec" ?⋞)
  ("\\curlyeqsucc" ?⋟)
  ("\\curlypreceq" ?≼)
  ("\\curlyvee" ?⋎)
  ("\\curlywedge" ?⋏)
  ("\\curvearrowleft" ?↶)
  ("\\curvearrowright" ?↷)

  ("\\dag" ?†)
  ("\\dagger" ?†)
  ("\\daleth" ?ℸ)
  ("\\dashv" ?⊣)
  ("\\ddag" ?‡)
  ("\\ddagger" ?‡)
  ("\\diamond" ?⋄)
  ("\\doteq" ?≐)
  ("\\doteqdot" ?≑)
  ("\\dotplus" ?∔)
  ("\\dotsquare" ?⊡)
  ("\\downarrow" ?↓)
  ("\\downdownarrows" ?⇊)
  ("\\downleftharpoon" ?⇃)
  ("\\downrightharpoon" ?⇂)
  ("\\ell" ?ℓ)
  ("\\eqcirc" ?≖)
  ("\\eqcolon" ?≕)
  ("\\eqslantgtr" ?⋝)
  ("\\eqslantless" ?⋜)
  ("\\fallingdotseq" ?≒)
  ("\\flat" ?♭)
  ("\\frac1" ?⅟)
  ("\\frac12" ?½)
  ("\\frac13" ?⅓)
  ("\\frac14" ?¼)
  ("\\frac15" ?⅕)
  ("\\frac16" ?⅙)
  ("\\frac18" ?⅛)
  ("\\frac23" ?⅔)
  ("\\frac25" ?⅖)
  ("\\frac34" ?¾)
  ("\\frac35" ?⅗)
  ("\\frac38" ?⅜)
  ("\\frac45" ?⅘)
  ("\\frac56" ?⅚)
  ("\\frac58" ?⅝)
  ("\\frac78" ?⅞)
  ("\\frown" ?⌢)
  ("\\gets" ?←)
  ("\\gimel" ?ℷ)
  ("\\gnapprox" ?⋧)
  ("\\gneq" ?≩)
  ("\\gneqq" ?≩)
  ("\\gnsim" ?⋧)
  ("\\gtrapprox" ?≳)
  ("\\gtrdot" ?⋗)
  ("\\gtreqless" ?⋛)
  ("\\gtreqqless" ?⋛)
  ("\\gtrless" ?≷)
  ("\\gtrsim" ?≳)
  ("\\gvertneqq" ?≩)
  ("\\hbar" ?ℏ)
  ("\\hookleftarrow" ?↩)
  ("\\hookrightarrow" ?↪)
  ("\\iff" ?⇔)
  ("\\imath" ?ı)
  ("\\infty" ?∞)
  ("\\intercal" ?⊺)
  ("\\leadsto" ?↝)
  ("\\leftarrow" ?←)
  ("\\leftarrowtail" ?↢)
  ("\\leftharpoondown" ?↽)
  ("\\leftharpoonup" ?↼)
  ("\\leftleftarrows" ?⇇)
  ("\\leftrightarrow" ?↔)
  ("\\leftrightarrows" ?⇆)
  ("\\leftrightharpoons" ?⇋)
  ("\\leftrightsquigarrow" ?↭)
  ("\\lessapprox" ?≲)
  ("\\lessdot" ?⋖)
  ("\\lesseqgtr" ?⋚)
  ("\\lesseqqgtr" ?⋚)
  ("\\lessgtr" ?≶)
  ("\\lesssim" ?≲)
  ("\\lhd" ?◁)
  ("\\rhd" ?▷)
  ("\\lnapprox" ?⋦)
  ("\\lneq" ?≨)
  ("\\lneqq" ?≨)
  ("\\lnsim" ?⋦)
  ("\\longleftarrow" ?⟵)
  ("\\longleftrightarrow" ?⟷)
  ("\\longmapsto" ?⟼)
  ("\\longrightarrow" ?⟶)
  ("\\looparrowleft" ?↫)
  ("\\looparrowright" ?↬)
  ("\\lozenge" ?✧)
  ("\\lvertneqq" ?≨)
  ("\\maltese" ?✠)
  ("\\mapsto" ?↦)
  ("\\mho" ?℧)
  ("\\models" ?⊧)
  ("\\multimap" ?⊸)
  ("\\nLeftarrow" ?⇍)
  ("\\nLeftrightarrow" ?⇎)
  ("\\nRightarrow" ?⇏)
  ("\\nVDash" ?⊯)
  ("\\nVdash" ?⊮)
  ("\\nabla" ?∇)
  ("\\napprox" ?≉)
  ("\\natural" ?♮)
  ("\\ncong" ?≇)
  ("\\nearrow" ?↗)
  ("\\neg" ?¬)
  ("\\newline" ? )
  ("\\nleftarrow" ?↚)
  ("\\nleftrightarrow" ?↮)
  ("\\not" ?̸)                   ; conflict with ¬ ("NOT SIGN")
  ("\\nparallel" ?∦)
  ("\\nprec" ?⊀)
  ("\\npreceq" ?⋠)
  ("\\nrightarrow" ?↛)
  ("\\nshortmid" ?∤)
  ("\\nshortparallel" ?∦)
  ("\\nsim" ?≁)
  ("\\nsimeq" ?≄)
  ("\\nsucc" ?⊁)
  ("\\nsucceq" ?⋡)
  ("\\ntriangleleft" ?⋪)
  ("\\ntrianglelefteq" ?⋬)
  ("\\ntriangleright" ?⋫)
  ("\\ntrianglerighteq" ?⋭)
  ("\\nvDash" ?⊭)
  ("\\nvdash" ?⊬)
  ("\\nwarrow" ?↖)
  ("\\par" ? )
  ("\\parallel" ?∥)
  ("\\partial" ?∂)
  ("\\perp" ?⊥)
  ("\\pitchfork" ?⋔)
  ("\\prec" ?≺)
  ("\\precapprox" ?≾)
  ("\\preceq" ?≼)
  ("\\precnapprox" ?⋨)
  ("\\precnsim" ?⋨)
  ("\\precsim" ?≾)
  ("\\prime" ?′)
  ("\\prod" ?∏)
  ("\\propto" ?∝)
  ("\\qed" ?∎)
  ("\\quad" ? )
  ("\\rightarrow" ?→)
  ("\\rightarrowtail" ?↣)
  ("\\rightharpoondown" ?⇁)
  ("\\rightharpoonup" ?⇀)
  ("\\rightleftarrows" ?⇄)
  ("\\rightleftharpoons" ?⇌)
  ("\\rightrightarrows" ?⇉)
  ("\\risingdotseq" ?≓)
  ("\\sbs" ?﹨)
  ("\\searrow" ?↘)
  ("\\sharp" ?♯)
  ("\\shortmid" ?∣)
  ("\\shortparallel" ?∥)
  ("\\sim" ?∼)
  ("\\simeq" ?≃)
  ("\\smallamalg" ?∐)
  ("\\smallsmile" ?⌣)
  ("\\smile" ?⌣)
  ("\\sphericalangle" ?∢)
  ("\\sqcap" ?⊓)
  ("\\sqcup" ?⊔)
  ("\\square" ?□)
  ("\\squigarrowright" ?⇝)
  ("\\star" ?⋆)
  ("\\succ" ?≻)
  ("\\succapprox" ?≿)
  ("\\succcurlyeq" ?≽)
  ("\\succeq" ?≽)
  ("\\succnapprox" ?⋩)
  ("\\succnsim" ?⋩)
  ("\\succsim" ?≿)
  ("\\sum" ?∑)
  ("\\swarrow" ?↙)
  ("\\thickapprox" ?≈)
  ("\\thicksim" ?∼)
  ("\\to" ?→)
  ("\\triangle" ?▵)
  ("\\triangledown" ?▿)
  ("\\triangleleft" ?◃)
  ("\\trianglelefteq" ?⊴)
  ("\\triangleq" ?≜)
  ("\\triangleright" ?▹)
  ("\\trianglerighteq" ?⊵)
  ("\\twoheadleftarrow" ?↞)
  ("\\twoheadrightarrow" ?↠)
  ("\\uparrow" ?↑)
  ("\\updownarrow" ?↕)
  ("\\upleftharpoon" ?↿)
  ("\\uplus" ?⊎)
  ("\\uprightharpoon" ?↾)
  ("\\upuparrows" ?⇈)
  ("\\vDash" ?⊨)

  ("\\varprime" ?′)
  ("\\varpropto" ?∝)
  ("\\varsigma" ?ς)
  ("\\vartriangleleft" ?⊲)
  ("\\vartriangleright" ?⊳)
  ("\\vdash" ?⊢)
  ("\\vee" ?∨)
  ("\\veebar" ?⊻)
  ("\\vert" ?|)
  ("\\wedge" ?∧)
  ("\\wp" ?℘)
  ("\\wr" ?≀)

  ("\\mathscr{I}" ?ℐ)           ; moment of inertia
  ("\\Smiley" ?☺)
  ("\\blacksmiley" ?☻)
  ("\\Frowny" ?☹)
  ("\\Letter" ?✉)
  ("\\permil" ?‰)
  ("\\dh" ?ð)
  ("\\DH" ?Ð)
  ("\\th" ?þ)
  ("\\TH" ?Þ)
  ("\\lnot" ?¬)
  ("\\lambdabar" ?ƛ)

  ("\\defs" ?≙)

  ("\\textmu" ?µ)
  ("\\textfractionsolidus" ?⁄)
  ("\\textbigcircle" ?⃝)
  ("\\textmusicalnote" ?♪)
  ("\\textdied" ?✝)
  ("\\textcolonmonetary" ?₡)
  ("\\textwon" ?₩)
  ("\\textnaira" ?₦)
  ("\\textpeso" ?₱)
  ("\\textlira" ?₤)
  ("\\textrecipe" ?℞)
  ("\\textinterrobang" ?‽)
  ("\\textpertenthousand" ?‱)
  ("\\textbaht" ?฿)
  ("\\textnumero" ?№)
  ("\\textdiscount" ?⁒)
  ("\\textestimated" ?℮)
  ("\\textopenbullet" ?◦)
  ("\\textlquill" ?\⁅)
  ("\\textrquill" ?\⁆)
  ("\\textcircledP" ?℗)
  ("\\textreferencemark" ?※)

  ;; Blackboard bold (written as "\Bbb{X}" or "\mathbb{X}").
  ("\\BA" ?𝔸)
  ("\\BB" ?𝔹)
  ("\\BC" ?ℂ)
  ("\\BD" ?𝔻)
  ("\\BE" ?𝔼)
  ("\\BF" ?𝔽)
  ("\\BG" ?𝔾)
  ("\\BH" ?ℍ)
  ("\\BI" ?𝕀)
  ("\\BJ" ?𝕁)
  ("\\BK" ?𝕂)
  ("\\BL" ?𝕃)
  ("\\BM" ?𝕄)
  ("\\BN" ?ℕ)
  ("\\BO" ?𝕆)
  ("\\BP" ?ℙ)
  ("\\BQ" ?ℚ)
  ("\\BR" ?ℝ)
  ("\\BS" ?𝕊)
  ("\\BT" ?𝕋)
  ("\\BU" ?𝕌)
  ("\\BV" ?𝕍)
  ("\\BW" ?𝕎)
  ("\\BX" ?𝕏)
  ("\\BY" ?𝕐)
  ("\\BZ" ?ℤ)
  ("\\B0" ?𝟘)
  ("\\B1" ?𝟙)
  ("\\B2" ?𝟚)
  ("\\B3" ?𝟛)
  ("\\B4" ?𝟜)
  ("\\B5" ?𝟝)
  ("\\B6" ?𝟞)
  ("\\B7" ?𝟟)
  ("\\B8" ?𝟠)
  ("\\B9" ?𝟡)

  ("\\Re" ?ℜ)
  ("\\Im" ?ℑ)

  ("\\aa" ?å)
  ("\\AA" ?Å)
  ("\\ae" ?æ)
  ("\\AE" ?Æ)
  ("\\oe" ?œ)
  ("\\OE" ?Œ)
  ("\\i" ?ı)
  ("\\L" ?Ł)
  ("\\l" ?ł)
  ("\\o" ?ø)
  ("\\O" ?Ø)
  ("^o_" ?º)

  ("\\!" ?¡)
  ("\\?" ?¿)
  ("\\S" ?§)
  ("\\P" ?¶)

  ("\\forall" ?∀)
  ("\\exists" ?∃)
  ("\\nexists" ?∄)
  ("\\emptyset" ?∅)
  ("\\setminus" ?∖)
  ("\\smallsetminus" ?∖)
  ("\\in" ?∈)
  ("\\notin" ?∉)
  ("\\ni" ?∋)
  ("\\notni" ?∌)
  ("\\cap" ?∩)
  ("\\cup" ?∪)
  ("\\bigcap" ?⋂)
  ("\\bigcup" ?⋃)
  ("\\subset" ?⊂)
  ("\\subseteq" ?⊆)
  ("\\subsetneq" ?⊊)
  ("\\nsubset" ?⊄)
  ("\\nsubseteq" ?⊈)
  ("\\supset" ?⊃)
  ("\\supseteq" ?⊇)
  ("\\supsetneq" ?⊋)
  ("\\nsupset" ?⊅)
  ("\\nsupseteq" ?⊉)
  ("\\sqsubset" ?⊏)
  ("\\sqsubseteq" ?⊑)
  ("\\sqsubsetneq" ?⋤)
  ("\\nsqsubseteq" ?⋢)
  ("\\sqsupset" ?⊐)
  ("\\sqsupseteq" ?⊒)
  ("\\sqsupsetneq" ?⋥)
  ("\\nsqsupseteq" ?⋣)
  ("\\Subset" ?⋐)
  ("\\Supset" ?⋑)
  ("\\Cap" ?⋒)
  ("\\Cup" ?⋓)

  ("\\boxminus" ?⊟)
  ("\\boxplus" ?⊞)
  ("\\boxtimes" ?⊠)
  ("\\ominus" ?⊖)
  ("\\oplus" ?⊕)
  ("\\otimes" ?⊗)
  ("\\oslash" ?⊘)
  ("\\pm" ?±)
  ("\\mp" ?∓)
  ("\\times" ?×)
  ("\\rightthreetimes" ?⋌)
  ("\\leftthreetimes" ?⋋)
  ("\\divideontimes" ?⋇)
  ("\\ltimes" ?⋉)
  ("\\rtimes" ?⋊)
  ("\\bowtie" ?⋈)
  ("\\Join" ?⋈)
  ("\\div" ?÷)
  ("\\surd" ?√)
  ("\\sqrt" ?√)
  ("\\sqrt3" ?∛)
  ("\\sqrt4" ?∜)
  ("\\int" ?∫)
  ("\\oint" ?∮)
  ("\\iint" ?∬)
  ("\\oiint" ?∯)
  ("\\iiint" ?∭)
  ("\\oiiint" ?∰)

  ("\\ne" ?≠)
  ("\\neq" ?≠)
  ("\\nequiv" ?≢)
  ("\\equiv" ?≡)
  ("\\ge" ?≥)
  ("\\le" ?≤)
  ("\\geq" ?≥)
  ("\\leq" ?≤)
  ("\\geqq" ?≧)
  ("\\leqq" ?≦)
  ("\\geqslant" ?≥)
  ("\\leqslant" ?≤)
  ("\\gg" ?≫)
  ("\\ll" ?≪)
  ("\\ggg" ?⋙)
  ("\\lll" ?⋘)
  ("\\ngtr" ?≯)
  ("\\nless" ?≮)
  ("\\ngeq" ?≱)
  ("\\nleq" ?≰)

  ("\\angle" ?∠)
  ("\\measuredangle" ?∡)
  ("\\mid" ?∣)
  ("\\nmid" ?∤)
  ("\\Vert" ?‖)
  ("\\bot" ?⊥)
  ("\\top" ?⊤)

  ("\\centerdot" ?·)
  ("\\cdot" ?·)
  ("\\odot" ?⊙)
  ("\\cdots" ?⋯)
  ("\\ldots" ?…)
  ("\\vdots" ?⋮)
  ("\\ddots" ?⋱)
  ("\\because" ?∵)
  ("\\therefore" ?∴)

  ("\\deg" ?°)
  ("\\celsius" ?℃)
  ("\\fahrenheit" ?℉)

  ("\\heartsuit" ?♡)
  ("\\diamondsuit" ?♢)
  ("\\spadesuit" ?♠)
  ("\\clubsuit" ?♣)
  ("\\whiteheartsuit" ?♡)
  ("\\whitediamondsuit" ?♢)
  ("\\whitespadesuit" ?♤)
  ("\\whiteclubsuit" ?♧)
  ("\\blackheartsuit" ?♥)
  ("\\blackdiamondsuit" ?♦)
  ("\\blackspadesuit" ?♠)
  ("\\blackclubsuit" ?♣)

  ("\\lq" ?‘)
  ("\\rq" ?’)
  ("\\glq" ?‚)
  ("\\grq" ?‘)
  ("\\glqq" ?„)
  ("\\grqq" ?“)
  ("\\ldq" ?\“)
  ("\\rdq" ?\”)
  ("\\flq" ?‹)
  ("\\frq" ?›)
  ("\\flqq" ?\«)
  ("\\frqq" ?\»)
  ("\\\"<" ?\«)
  ("\\\">" ?\»)

  ("\\langle" ?\⟨)
  ("\\rangle" ?\⟩)
  ("\\ldata" ?\《)
  ("\\rdata" ?\》)
  ("\\lceil" ?⌈)
  ("\\rceil" ?⌉)
  ("\\lfloor" ?⌊)
  ("\\rfloor" ?⌋)

  ("\\ulcorner" ?⌜)
  ("\\urcorner" ?⌝)
  ("\\llcorner" ?⌞)
  ("\\lrcorner" ?⌟)

  ("\\-" ?­)                    ; soft hyphen
  ("\\ " ? )                    ; no-break space

  ("\\\\" ?\\)
  ("^^" ?^)
  ("__" ?_)

  (";a" ?ä)
  (";A" ?Ä)
  (";e" ?ë)
  (";E" ?Ë)
  (";i" ?ï)
  (";I" ?Ï)
  (";o" ?ö)
  (";O" ?Ö)
  (";s" ?ß)
  (";u" ?ü)
  (";U" ?Ü)
  (";w" ?ẅ)
  (";W" ?Ẅ)
  (";y" ?ÿ)
  (";Y" ?Ÿ)
  )

(provide 'al-quail)

;;; al-quail.el ends here
